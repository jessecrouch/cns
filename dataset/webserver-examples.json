{
  "version": "1.0",
  "description": "CNS webserver examples for LLM training",
  "count": 8,
  "examples": [
{
      "id": "webserver-post-data",
      "prompt": "Create a webserver that accepts POST data",
      "cns-code": "Story: Webserver handling POST requests\n\nGiven:\n  port: Integer = 8080 [network port]\n  routes: List = ((GET / Hello, World!)) [URL to response mappings]\n  server_socket: Socket [network listener]\n  connection_count: Integer = 0 [track connections]\n\n  post_data: String [request body]\nStep 1 → Create server_socket on port\n  Effect: Create socket server_socket on port\n  Because: Listen for incoming HTTP connections\n\nStep 2 → Accept connection on server_socket\n  Effect: Accept connection on server_socket\n  Because: Receive client HTTP request\n  Then: connection_count becomes connection_count + 1\n\nStep 3 → Read request from client\n  Effect: Network read\n  Because: Get HTTP request data\n  Then: request becomes parse HTTP request from request_data\n\nStep 4 → Send HTTP response to client\n  Effect: Send \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Hello!</h1>\" to client\n  Because: Respond to client request\n\nStep 5 → If connection_count < 100, repeat from Step 2\n  Because: Handle multiple client connections\n  Otherwise: go to End\n\nEnd:\n  Return \"Server stopped\"\n  Because: Maximum connections reached\n",
      "category": "webserver",
      "tags": ["networking", "http", "effects", "loops"],
      "difficulty": "medium",
      "expected": "Server responds to HTTP requests on configured port",
      "notes": "Auto-generated variant"
    },
{
      "id": "webserver-query-params",
      "prompt": "Create a webserver that handles query parameters",
      "cns-code": "Story: Webserver with query parameter parsing\n\nGiven:\n  port: Integer = 8080 [network port]\n  routes: List = ((GET / Hello, World!)) [URL to response mappings]\n  server_socket: Socket [network listener]\n  connection_count: Integer = 0 [track connections]\n\n  query_params: List [parsed query parameters]\nStep 1 → Create server_socket on port\n  Effect: Create socket server_socket on port\n  Because: Listen for incoming HTTP connections\n\nStep 2 → Accept connection on server_socket\n  Effect: Accept connection on server_socket\n  Because: Receive client HTTP request\n  Then: connection_count becomes connection_count + 1\n\nStep 3 → Read request from client\n  Effect: Network read\n  Because: Get HTTP request data\n  Then: request becomes parse HTTP request from request_data\n\nStep 4 → Send HTTP response to client\n  Effect: Send \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Hello!</h1>\" to client\n  Because: Respond to client request\n\nStep 5 → If connection_count < 100, repeat from Step 2\n  Because: Handle multiple client connections\n  Otherwise: go to End\n\nEnd:\n  Return \"Server stopped\"\n  Because: Maximum connections reached\n",
      "category": "webserver",
      "tags": ["networking", "http", "effects", "loops"],
      "difficulty": "medium",
      "expected": "Server responds to HTTP requests on configured port",
      "notes": "Auto-generated variant"
    },
{
      "id": "webserver-rest-api",
      "prompt": "Create a REST API webserver",
      "cns-code": "Story: REST API server with CRUD endpoints\n\nGiven:\n  port: Integer = 8080 [network port]\n  routes: List = ((GET /api/users User List) (POST /api/users Create User)) [URL to response mappings]\n  server_socket: Socket [network listener]\n  connection_count: Integer = 0 [track connections]\n\nStep 1 → Create server_socket on port\n  Effect: Create socket server_socket on port\n  Because: Listen for incoming HTTP connections\n\nStep 2 → Accept connection on server_socket\n  Effect: Accept connection on server_socket\n  Because: Receive client HTTP request\n  Then: connection_count becomes connection_count + 1\n\nStep 3 → Read request from client\n  Effect: Network read\n  Because: Get HTTP request data\n  Then: request becomes parse HTTP request from request_data\n\nStep 4 → Send HTTP response to client\n  Effect: Send \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Hello!</h1>\" to client\n  Because: Respond to client request\n\nStep 5 → If connection_count < 100, repeat from Step 2\n  Because: Handle multiple client connections\n  Otherwise: go to End\n\nEnd:\n  Return \"Server stopped\"\n  Because: Maximum connections reached\n",
      "category": "webserver",
      "tags": ["networking", "http", "effects", "loops"],
      "difficulty": "medium",
      "expected": "Server responds to HTTP requests on configured port",
      "notes": "Auto-generated variant"
    },
{
      "id": "webserver-multiple-routes",
      "prompt": "Create a webserver with multiple routes",
      "cns-code": "Story: Webserver with multiple route handling\n\nGiven:\n  port: Integer = 8080 [network port]\n  routes: List = ((GET / Home) (GET /about About Page)) [URL to response mappings]\n  server_socket: Socket [network listener]\n  connection_count: Integer = 0 [track connections]\n\nStep 1 → Create server_socket on port\n  Effect: Create socket server_socket on port\n  Because: Listen for incoming HTTP connections\n\nStep 2 → Accept connection on server_socket\n  Effect: Accept connection on server_socket\n  Because: Receive client HTTP request\n  Then: connection_count becomes connection_count + 1\n\nStep 3 → Read request from client\n  Effect: Network read\n  Because: Get HTTP request data\n  Then: request becomes parse HTTP request from request_data\n\nStep 4 → Send HTTP response to client\n  Effect: Send \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Hello!</h1>\" to client\n  Because: Respond to client request\n\nStep 5 → If connection_count < 100, repeat from Step 2\n  Because: Handle multiple client connections\n  Otherwise: go to End\n\nEnd:\n  Return \"Server stopped\"\n  Because: Maximum connections reached\n",
      "category": "webserver",
      "tags": ["networking", "http", "effects", "loops"],
      "difficulty": "medium",
      "expected": "Server responds to HTTP requests on configured port",
      "notes": "Auto-generated variant"
    },
{
      "id": "webserver-port-9000",
      "prompt": "Create a webserver on port 9000",
      "cns-code": "Story: Run webserver on port 9000\n\nGiven:\n  port: Integer = 9000 [network port]\n  routes: List = ((GET / Hello, World!)) [URL to response mappings]\n  server_socket: Socket [network listener]\n  connection_count: Integer = 0 [track connections]\n\nStep 1 → Create server_socket on port\n  Effect: Create socket server_socket on port\n  Because: Listen for incoming HTTP connections\n\nStep 2 → Accept connection on server_socket\n  Effect: Accept connection on server_socket\n  Because: Receive client HTTP request\n  Then: connection_count becomes connection_count + 1\n\nStep 3 → Read request from client\n  Effect: Network read\n  Because: Get HTTP request data\n  Then: request becomes parse HTTP request from request_data\n\nStep 4 → Send HTTP response to client\n  Effect: Send \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Hello!</h1>\" to client\n  Because: Respond to client request\n\nStep 5 → If connection_count < 100, repeat from Step 2\n  Because: Handle multiple client connections\n  Otherwise: go to End\n\nEnd:\n  Return \"Server stopped\"\n  Because: Maximum connections reached\n",
      "category": "webserver",
      "tags": ["networking", "http", "effects", "loops"],
      "difficulty": "medium",
      "expected": "Server responds to HTTP requests on configured port",
      "notes": "Auto-generated variant"
    },
{
      "id": "webserver-port-8080",
      "prompt": "Create a webserver on port 8080",
      "cns-code": "Story: Run webserver on port 8080\n\nGiven:\n  port: Integer = 8080 [network port]\n  routes: List = ((GET / Hello, World!)) [URL to response mappings]\n  server_socket: Socket [network listener]\n  connection_count: Integer = 0 [track connections]\n\nStep 1 → Create server_socket on port\n  Effect: Create socket server_socket on port\n  Because: Listen for incoming HTTP connections\n\nStep 2 → Accept connection on server_socket\n  Effect: Accept connection on server_socket\n  Because: Receive client HTTP request\n  Then: connection_count becomes connection_count + 1\n\nStep 3 → Read request from client\n  Effect: Network read\n  Because: Get HTTP request data\n  Then: request becomes parse HTTP request from request_data\n\nStep 4 → Send HTTP response to client\n  Effect: Send \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Hello!</h1>\" to client\n  Because: Respond to client request\n\nStep 5 → If connection_count < 100, repeat from Step 2\n  Because: Handle multiple client connections\n  Otherwise: go to End\n\nEnd:\n  Return \"Server stopped\"\n  Because: Maximum connections reached\n",
      "category": "webserver",
      "tags": ["networking", "http", "effects", "loops"],
      "difficulty": "medium",
      "expected": "Server responds to HTTP requests on configured port",
      "notes": "Auto-generated variant"
    },
{
      "id": "webserver-port-8000",
      "prompt": "Create a webserver on port 8000",
      "cns-code": "Story: Run webserver on port 8000\n\nGiven:\n  port: Integer = 8000 [network port]\n  routes: List = ((GET / Hello, World!)) [URL to response mappings]\n  server_socket: Socket [network listener]\n  connection_count: Integer = 0 [track connections]\n\nStep 1 → Create server_socket on port\n  Effect: Create socket server_socket on port\n  Because: Listen for incoming HTTP connections\n\nStep 2 → Accept connection on server_socket\n  Effect: Accept connection on server_socket\n  Because: Receive client HTTP request\n  Then: connection_count becomes connection_count + 1\n\nStep 3 → Read request from client\n  Effect: Network read\n  Because: Get HTTP request data\n  Then: request becomes parse HTTP request from request_data\n\nStep 4 → Send HTTP response to client\n  Effect: Send \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Hello!</h1>\" to client\n  Because: Respond to client request\n\nStep 5 → If connection_count < 100, repeat from Step 2\n  Because: Handle multiple client connections\n  Otherwise: go to End\n\nEnd:\n  Return \"Server stopped\"\n  Because: Maximum connections reached\n",
      "category": "webserver",
      "tags": ["networking", "http", "effects", "loops"],
      "difficulty": "medium",
      "expected": "Server responds to HTTP requests on configured port",
      "notes": "Auto-generated variant"
    },
{
      "id": "webserver-port-3000",
      "prompt": "Create a webserver on port 3000",
      "cns-code": "Story: Run webserver on port 3000\n\nGiven:\n  port: Integer = 3000 [network port]\n  routes: List = ((GET / Hello, World!)) [URL to response mappings]\n  server_socket: Socket [network listener]\n  connection_count: Integer = 0 [track connections]\n\nStep 1 → Create server_socket on port\n  Effect: Create socket server_socket on port\n  Because: Listen for incoming HTTP connections\n\nStep 2 → Accept connection on server_socket\n  Effect: Accept connection on server_socket\n  Because: Receive client HTTP request\n  Then: connection_count becomes connection_count + 1\n\nStep 3 → Read request from client\n  Effect: Network read\n  Because: Get HTTP request data\n  Then: request becomes parse HTTP request from request_data\n\nStep 4 → Send HTTP response to client\n  Effect: Send \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1>Hello!</h1>\" to client\n  Because: Respond to client request\n\nStep 5 → If connection_count < 100, repeat from Step 2\n  Because: Handle multiple client connections\n  Otherwise: go to End\n\nEnd:\n  Return \"Server stopped\"\n  Because: Maximum connections reached\n",
      "category": "webserver",
      "tags": ["networking", "http", "effects", "loops"],
      "difficulty": "medium",
      "expected": "Server responds to HTTP requests on configured port",
      "notes": "Auto-generated variant"
    }
  ]
}
