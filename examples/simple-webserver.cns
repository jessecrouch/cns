Story: Run a simple webserver on port 8080

Given:
  port: Integer = 8080 [network port]
  server_socket: Socket [network listener]
  response: String = "Hello, World!" [default response]
  connection_count: Integer = 0 [track connections]
  
Step 1 → Create server_socket on port
  Effect: Create socket server_socket on 8080
  Because: We need to listen for incoming HTTP connections
  
Step 2 → Accept connection on server_socket
  Effect: Accept connection
  Because: Wait for client request
  Then: connection_count becomes connection_count + 1
  
Step 3 → Parse HTTP request
  Effect: Network read
  Because: Receive and understand client's HTTP request
  
Step 4 → Send response to client
  Effect: Send "HTTP/1.1 200 OK\nContent-Type: text/plain\n\n{response}" to client
  Because: Return the greeting to the client
  
Step 5 → If connection_count < 3
  Then: repeat from Step 2
  Otherwise: go to End
  Because: Handle up to 3 connections for this demo
  
Error:
  Return "Server error"
  Effect: Log "Error in webserver"
  Because: Handle unexpected failures gracefully
  
End: Close server_socket
  Effect: Close socket server_socket
  Because: Clean up network resources properly
