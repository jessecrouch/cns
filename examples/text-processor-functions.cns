Story: IsPositive (function)
Given:
  Num: Integer = 0
  Result: Boolean = FALSE

Step 1 → Check if positive
  Because: Determine if number is greater than zero
  Then: Result becomes Num > 0

End: Return Result

---

Story: Square (function)
Given:
  Num: Integer = 0
  Result: Integer = 0

Step 1 → Calculate square
  Because: Multiply number by itself
  Then: Result becomes Num * Num

End: Return Result

---

Story: SumSquares (function)
Given:
  A: Integer = 0
  B: Integer = 0
  SquareA: Integer = 0
  SquareB: Integer = 0
  Sum: Integer = 0

Step 1 → Square first number
  Because: Get A squared
  Then: SquareA becomes Square(A)

Step 2 → Square second number
  Because: Get B squared
  Then: SquareB becomes Square(B)

Step 3 → Add squares
  Because: Sum the squared values
  Then: Sum becomes SquareA + SquareB

End: Return Sum

---

Story: AbsValue (function)
Given:
  Num: Integer = 0
  IsPos: Boolean = FALSE
  Result: Integer = 0

Step 1 → Check if positive
  Because: Determine if we need to negate
  Then: IsPos becomes IsPositive(Num)

Step 2 → If IsPos = TRUE
  Because: Positive numbers stay the same
  Then: Result becomes Num
  Otherwise: go to Step 3

Step 3 → Negate the number
  Because: Make negative numbers positive
  Then: Result becomes 0 - Num

End: Return Result

---

Story: ProcessNumbers
Given:
  X: Integer = -5
  Y: Integer = 3
  AbsX: Integer = 0
  AbsY: Integer = 0
  SumSq: Integer = 0

Step 1 → Get absolute value of X
  Because: Need positive version of X
  Then: AbsX becomes AbsValue(X)
  Effect: Print "Absolute value of {X} is {AbsX}"

Step 2 → Get absolute value of Y
  Because: Need positive version of Y
  Then: AbsY becomes AbsValue(Y)
  Effect: Print "Absolute value of {Y} is {AbsY}"

Step 3 → Calculate sum of squares
  Because: Demonstrate function composition
  Then: SumSq becomes SumSquares(AbsX, AbsY)
  Effect: Print "Sum of squares: {AbsX}^2 + {AbsY}^2 = {SumSq}"

End: Return SumSq
