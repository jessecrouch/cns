Story: Add (function)
Given:
  a: Integer
  b: Integer
  sum: Integer = 0

Step 1 → Calculate sum
  Because: add the two numbers together
  Then: sum becomes a + b

End: Return sum

---

Story: Multiply (function)
Given:
  x: Integer
  y: Integer
  product: Integer = 0

Step 1 → Calculate product
  Because: multiply x by y
  Then: product becomes x * y

End: Return product

---

Story: Power (function)
Given:
  base: Integer
  exponent: Integer
  result: Integer = 1
  counter: Integer = 0

Step 1 → If exponent = 0
  Because: anything to the power of 0 is 1
  Then: go to End
  Otherwise: go to Step 2

Step 2 → Multiply result by base
  Because: building up the power
  Then: result becomes Multiply(result, base)
  Then: counter becomes counter + 1

Step 3 → If counter < exponent
  Because: need to multiply exponent times
  Then: repeat from Step 2
  Otherwise: go to End

End: Return result

---

Story: Calculate Expression
Given:
  x: Integer = 5
  y: Integer = 10
  sum_result: Integer
  mult_result: Integer
  power_result: Integer
  final: Integer

Step 1 → Add x and y
  Because: first operation in expression
  Then: sum_result becomes Add(x, y)
  Effect: Print "Add({x}, {y}) = {sum_result}"

Step 2 → Multiply the sum by x
  Because: continue building expression
  Then: mult_result becomes Multiply(sum_result, x)
  Effect: Print "Multiply({sum_result}, {x}) = {mult_result}"

Step 3 → Calculate power
  Because: compute final result
  Then: power_result becomes Power(2, 3)
  Effect: Print "Power(2, 3) = {power_result}"

Step 4 → Final calculation
  Because: combine all results
  Then: final becomes Add(mult_result, power_result)
  Effect: Print "Final: {mult_result} + {power_result} = {final}"

End: Return final
